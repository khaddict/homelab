version: 1.0
description: Workflow to decommission Proxmox VMs properly.

input:
  - vm_name
  - node

vars:
  - domain: "homelab.lan"
  - fqdn: <% ctx().vm_name + "." + ctx().domain %>
  - node_fqdn: "<% ctx().node %>.<% ctx().domain %>"
  - saltmaster: "saltmaster.<% ctx().domain %>"
  - zone_name: "<% ctx().domain %>."
  - ptr_zone_name: "0.168.192.in-addr.arpa."
  - vm_id_netbox: ""
  - vm_ip_netbox: ""
  - role_id: ""
  - vm_id: ""
  - msg: ""

tasks:
  get_vm_id_ip_netbox:
    action: netbox.get.virtualization.virtual_machines
    input:
      name: [<% ctx().fqdn %>]
    next:
      - when: <% succeeded() %>
        do: vm_existence
        publish:
          - vm_id_netbox: <% str(result().result.raw.results[0].id) %>
          - vm_ip_netbox: <% str(result().result.raw.results[0].primary_ip.address.split("/")[0]) %>
          - role_id: <% str(result().result.raw.results[0].role.id) %>
      - when: <% failed() %>
        publish:
          - msg: "Could not fetch VM ID and primary IP on NetBox for <% ctx().fqdn %>."

  vm_existence:
    action: core.remote
    input:
      hosts: "<% ctx().node_fqdn %>"
      username: root
      cmd: |
        qm list | grep "<% ctx().vm_name %>"
    next:
      - when: <% succeeded() %>
        do: vm_status
        publish:
          - vm_id: <% result()[ctx().node_fqdn].stdout.split()[0] %>
      - when: <% failed() %>
        publish:
          - msg: "VM <% ctx().vm_name %> not found on Proxmox node <% ctx().node_fqdn %>."

  vm_status:
    action: core.remote
    input:
      hosts: "<% ctx().node_fqdn %>"
      username: root
      cmd: |
        qm status <% ctx().vm_id %> | awk '{print $2}'
    next:
      - when: <% succeeded() and result()[ctx().node_fqdn].stdout = "running" %>
        do: stop_vm
      - when: <% succeeded() and result()[ctx().node_fqdn].stdout = "stopped" %>
        do: delete_vm
      - when: <% failed() %>
        publish:
          - msg: "Unable to determine power state for VM <% ctx().vm_id %> on <% ctx().node_fqdn %>."

  stop_vm:
    action: core.remote
    input:
      hosts: "<% ctx().node_fqdn %>"
      username: root
      cmd: |
        qm stop <% ctx().vm_id %>
    next:
      - when: <% succeeded() %>
        do: delete_vm
      - when: <% failed() %>
        publish:
          - msg: "Could not stop VM <% ctx().vm_id %> on <% ctx().node_fqdn %>."

  delete_vm:
    action: core.remote
    input:
      hosts: "<% ctx().node_fqdn %>"
      username: root
      cmd: |
        qm destroy <% ctx().vm_id %>
    next:
      - when: <% succeeded() %>
        do: delete_saltkey
      - when: <% failed() %>
        publish:
          - msg: "Could not delete VM <% ctx().vm_id %> on <% ctx().node_fqdn %>."

  delete_saltkey:
    action: core.remote
    input:
      hosts: <% ctx().saltmaster %>
      username: root
      cmd: |
        salt-key -d <% ctx().fqdn %> -y
    next:
      - when: <% succeeded() %>
        do: delete_a_record
      - when: <% failed() %>
        publish:
          - msg: "Could not delete Salt key for <% ctx().fqdn %> on <% ctx().saltmaster %>."

  delete_a_record:
    action: powerdns.delete_records
    input:
      rrset_changetype: "DELETE"
      rrset_name: <% ctx().vm_name %>
      rrset_rtype: A
      rrset_records: "[ ]"
      zone_name: <% ctx().zone_name %>
    next:
      - when: <% succeeded() %>
        do: calculate_reverse_dns
      - when: <% failed() %>
        publish:
          - msg: "Could not delete A record for <% ctx().fqdn %> in zone <% ctx().zone_name %>."

  calculate_reverse_dns:
    action: core.noop
    next:
      - when: <% succeeded() %>
        do: delete_ptr_record
        publish:
          - reverse_name: <% ctx(vm_ip_netbox).split(".").limit(4).reverse().join(".") + ".in-addr.arpa." %>
      - when: <% failed() %>
        publish:
          - msg: "Could not derive reverse name from IP <% ctx().vm_ip_netbox %>."

  delete_ptr_record:
    action: powerdns.delete_records
    input:
      rrset_changetype: "DELETE"
      rrset_name: <% ctx().reverse_name %>
      rrset_rtype: PTR
      rrset_records: "[ ]"
      zone_name: <% ctx().ptr_zone_name %>
    next:
      - when: <% succeeded() %>
        do: delete_vm_netbox
      - when: <% failed() %>
        publish:
          - msg: "Could not delete PTR record <% ctx().reverse_name %> for IP <% ctx().vm_ip_netbox %> in zone <% ctx().ptr_zone_name %>."

  delete_vm_netbox:
    action: netbox.delete.virtualization.virtual_machines
    input:
      id: <% int(ctx().vm_id_netbox) %>
    next:
      - when: <% succeeded() %>
        publish:
          - msg: "Decommission complete: '<% ctx().fqdn %>' removed from Proxmox, Salt, and DNS; NetBox record deleted."
      - when: <% failed() %>
        publish:
          - msg: "Could not delete virtual machine <% ctx().fqdn %> (id <% ctx().vm_id_netbox %>) on NetBox."

output:
  - msg: <% ctx().msg %>
