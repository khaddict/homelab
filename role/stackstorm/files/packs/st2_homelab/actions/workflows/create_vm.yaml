version: 1.0
description: Create a new Proxmox VM.

input:
  - vmid
  - vm_name
  - disk
  - memory
  - cores
  - description
  - template
  - ip_addr
  - vm_role
  - node
  - force
  - tags

vars:
  - domain: "{{ domain }}"
  - vm_fqdn: "<% ctx().vm_name %>.<% ctx().domain %>"
  - saltmaster: "saltmaster.<% ctx().domain %>"
  - pdns: "pdns.<% ctx().domain %>"
  - recursor: "recursor.<% ctx().domain %>"
  - proxmox: "<% ctx().node %>.<% ctx().domain %>"
  - template_id: ""
  - storage: "cls1pool"
  - st2_sshkey: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMe90Wiw4mR6NRi6lQ1qBmDHHzweeMSeksqUd38GpR2e stackstorm.homelab.lan"
  - saltmaster_sshkey: "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJ3swvmrdQSe+f3QsuNdBtMl8WIQePhU2KDLiy9RozWU saltmaster.homelab.lan"
  - a_zone_name: "<% ctx().domain %>."
  - ptr_zone_name: "0.168.192.in-addr.arpa."
  - msg: ""

tasks:
  start:
    action: core.echo message="Automation started."
    next:
      - when: <% succeeded() and ctx().force = false %>
        do: get_approval
      - when: <% succeeded() and ctx().force = true %>
        do: check_vm_existence

  get_approval:
    action: core.ask
    input:
      schema:
        type: object
        properties:
          approved:
            type: boolean
            description: "You must update the main.json data file before starting the workflow. Continue ?"
            required: True
    next:
      - when: <% succeeded() %>
        do: check_vm_existence

  check_vm_existence:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        pvesh get /cluster/resources --type vm --output-format json | jq -e --arg name '<% ctx().vm_name %>' 'any(.[]; .type=="qemu" and .name==$name)' >/dev/null && echo EXISTS || echo ABSENT
    next:
      - when: <% result()[ctx().proxmox].stdout = "EXISTS" %>
        do: noop
        publish:
          - msg: "VM <% ctx().vm_name %> already exists on <% ctx().proxmox %>. Skipping creation."
      - when: <% result()[ctx().proxmox].stdout = "ABSENT" %>
        do: get_template_id

  get_template_id:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        pvesh get /nodes/<% ctx().node %>/qemu --output-format json | jq -re --arg name '<% ctx().template %>' 'first(.[] | select(.template==1 and .name==$name)) | .vmid'
    next:
      - when: <% succeeded() %>
        do: clone_vm
        publish:
          - template_id: <% result()[ctx().proxmox].stdout %>
      - when: <% failed() %>
        publish:
          - msg: "Failed to retrieve template ID for <% ctx().template %> on <% ctx().proxmox %>."

  clone_vm:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm clone <% ctx().template_id %> <% ctx().vmid %> --full --name <% ctx().vm_name %> --storage <% ctx().storage %> --target <% ctx().node %>
    next:
      - when: <% succeeded() %>
        do: configure_vm
      - when: <% failed() %>
        publish:
          - msg: "Failed to clone VM <% ctx().vm_name %> (vmid <% ctx().vmid %>) from template <% ctx().template_id %> on <% ctx().proxmox %>."

  configure_vm:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm set <% ctx().vmid %> --tags <% ctx().tags %> --ciuser root -ipconfig0 ip=<% ctx().ip_addr %>/24,gw=192.168.0.254 --memory <% ctx().memory %> --cores <% ctx().cores %> --description "<% ctx().description %>" --sshkeys <(echo -e "<% ctx().st2_sshkey %>\n<% ctx().saltmaster_sshkey %>")
    next:
      - when: <% succeeded() %>
        do: resize_disk
      - when: <% failed() %>
        publish:
          - msg: "Failed to configure VM <% ctx().vm_name %> (vmid <% ctx().vmid %>) on <% ctx().proxmox %>."

  resize_disk:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm resize <% ctx().vmid %> scsi0 <% ctx().disk %>G
    next:
      - when: <% succeeded() %>
        do: first_start_vm
      - when: <% failed() %>
        publish:
          - msg: "Disk resize failed for VM <% ctx().vm_name %> (vmid <% ctx().vmid %>)."

  first_start_vm:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm start <% ctx().vmid %>
        until nc -z -w1 <% ctx().ip_addr %> 22 >/dev/null 2>&1; do sleep 1; done
    next:
      - when: <% succeeded() %>
        do: set_hostname
      - when: <% failed() %>
        publish:
          - msg: "Failed to start VM <% ctx().vm_name %> or SSH (22/tcp) not reachable at <% ctx().ip_addr %>."

  set_hostname:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      cmd: |
        hostnamectl set-hostname "<% ctx().vm_fqdn %>"
    next:
      - when: <% succeeded() %>
        do: ssh_keygen
      - when: <% failed() %>
        publish:
          - msg: "Failed to set hostname <% ctx().vm_fqdn %> on <% ctx().ip_addr %>."

  ssh_keygen:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      cmd: |
        [ -f /root/.ssh/id_ed25519 ] || ssh-keygen -t ed25519 -C "<% ctx().vm_fqdn %>" -f /root/.ssh/id_ed25519 -q -N ""
    next:
      - when: <% succeeded() %>
        do: independent_minion
      - when: <% failed() %>
        publish:
          - msg: "Failed to generate SSH keypair on <% ctx().ip_addr %>."

  independent_minion:
    action: core.remote
    input:
      hosts: <% ctx().saltmaster %>
      username: root
      timeout: 180
      cmd: |
        salt-ssh --user=root -i --priv=/root/.ssh/id_ed25519 <% ctx().ip_addr %> state.sls independent
    next:
      - when: <% succeeded() %>
        do: restart_salt_minion
      - when: <% failed() %>
        publish:
          - msg: "Salt independent minion bootstrap failed for <% ctx().vm_fqdn %>."

  restart_salt_minion:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      timeout: 120
      cmd: |
        systemctl stop salt-minion && systemctl kill -s SIGKILL --kill-who=all salt-minion 2>/dev/null || true; rm -f /run/salt-minion.pid; systemctl reset-failed salt-minion; systemctl start salt-minion
    next:
      - when: <% succeeded() %>
        do: accept_salt_key
      - when: <% failed() %>
        publish:
          - msg: "Failed to restart salt-minion on <% ctx().vm_fqdn %>."

  accept_salt_key:
    action: core.remote
    input:
      hosts: <% ctx().saltmaster %>
      username: root
      cmd: |
        salt-key -a <% ctx().vm_fqdn %> -y
    next:
      - when: <% succeeded() %>
        do: highstate_vm
      - when: <% failed() %>
        publish:
          - msg: "Failed to accept Salt key for <% ctx().vm_fqdn %>."

  highstate_vm:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      timeout: 240
      cmd: |
        salt-call state.highstate
    next:
      - when: <% succeeded() %>
        do: remove_useless_devices
      - when: <% failed() %>
        publish:
          - msg: "Salt highstate failed on <% ctx().vm_fqdn %>."

  remove_useless_devices:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm set <% ctx().vmid %> --delete efidisk0 --delete ide0
    next:
      - when: <% succeeded() %>
        do: shutdown_vm
      - when: <% failed() %>
        publish:
          - msg: "Failed to delete cloud-init/EFI devices (efidisk0, ide0) on VM <% ctx().vmid %>."

  shutdown_vm:
    action: core.remote
    input:
      hosts: <% ctx().ip_addr %>
      username: root
      cmd: |
        shutdown -h now
    next:
      - when: <% succeeded() or failed() %>
        do: wait_vm_stopped

  wait_vm_stopped:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        until qm status <% ctx().vmid %> | grep -q 'stopped'; do sleep 1; done; qm start <% ctx().vmid %>
    next:
      - when: <% succeeded() %>
        do: delete_unused0
      - when: <% failed() %>
        publish:
          - msg: "Failed to stop or restart VM <% ctx().vmid %> on <% ctx().proxmox %>."

  delete_unused0:
    action: core.remote
    input:
      hosts: <% ctx().proxmox %>
      username: root
      cmd: |
        qm set <% ctx().vmid %> --delete unused0
    next:
      - when: <% succeeded() %>
        do: create_a_record
      - when: <% failed() %>
        publish:
          - msg: "Failed to delete unused0 on VM <% ctx().vmid %>."

  create_a_record:
    action: powerdns.create_records
    input:
      rrset_changetype: "REPLACE"
      rrset_name: "<% ctx().vm_name %>"
      rrset_ttl: 60
      rrset_rtype: A
      rrset_records:
        - <% ctx().ip_addr %>
      zone_name: "<% ctx().a_zone_name %>"
    next:
      - when: <% succeeded() %>
        do: create_ptr_record
      - when: <% failed() %>
        publish:
          - msg: "DNS A record creation failed for <% ctx().vm_fqdn %> → <% ctx().ip_addr %>."

  create_ptr_record:
    action: powerdns.create_records
    input:
      rrset_changetype: "REPLACE"
      rrset_name: "<% ctx().ip_addr.split('.')[3] %>"
      rrset_ttl: 60
      rrset_rtype: PTR
      rrset_records:
        - "<% ctx().vm_fqdn %>."
      zone_name: "<% ctx().ptr_zone_name %>"
    next:
      - when: <% succeeded() %>
        do: restart_recursor_service
      - when: <% failed() %>
        publish:
          - msg: "DNS PTR record creation failed for <% ctx().ip_addr %> → <% ctx().vm_fqdn %>."

  restart_recursor_service:
    action: core.remote
    input:
      hosts: <% ctx().recursor %>
      username: root
      cmd: |
        systemctl restart pdns-recursor.service
    next:
      - when: <% succeeded() %>
        do: create_vm_netbox
      - when: <% failed() %>
        publish:
          - msg: "Failed to restart pdns-recursor.service on <% ctx().recursor %>."

  create_vm_netbox:
    action: st2_homelab.netbox_vm
    input:
      vm_name: "<% ctx().vm_name %>"
      vm_role: <% ctx().vm_role %>
      ip_addr: "<% ctx().ip_addr %>/24"
      vcpus: <% ctx().cores %>
      memory: <% ctx().memory %>
      disk: <% int(ctx().disk) * 1000 %>
    next:
      - when: <% succeeded() %>
        publish:
          - msg: "Provisioning complete: VM <% ctx().vm_fqdn %> (vmid <% ctx().vmid %>) created and recorded in NetBox."
      - when: <% failed() %>
        publish:
          - msg: "NetBox creation failed for VM <% ctx().vm_fqdn %>."

output:
  - msg: <% ctx().msg %>
